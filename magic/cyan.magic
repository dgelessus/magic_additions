# Plasma encrypted files.
# Their structure is very simple and identical across all games,
# with the only difference being the magic number.

0 string whatdoyousee Plasma XTEA-encrypted data, %s signature (Uru)
>12 use plasma_encrypted

0 string BriceIsSmart Plasma XTEA-encrypted data, %s signature (Uru)
>12 use plasma_encrypted

0 string notthedroids Plasma droid-encrypted data, %s signature (MOUL)
>12 use plasma_encrypted

0 lelong 0x0D874288 Plasma AES-encrypted data, 0x%x signature (Myst V)
>4 use plasma_encrypted

0 name plasma_encrypted
>0 lelong x \b, %u bytes

# Plasma PRP files, in their variations from different games and versions.
# PRP files do not have a magic number, so these patterns are not that reliable and often incorrectly match random binary files.
# The PRP format is also complex and obfuscated enough that it is difficult to extract much useful information from it.

# This "universal" variant seems to be internal to libHSPlasma and not used by any of the games.
# TODO This check is very weak!
0 leshort -1 Plasma PRP data, version %d (universal)
!:ext prp

# All other known PRP format versions, according to libHSPlasma.
# Versions <= 5 store the PRP version in the first 4 bytes.
0 lelong 2
>0 use plasma_prp_nonlive_check
0 lelong 3
>0 use plasma_prp_nonlive_check
0 lelong 4
>0 use plasma_prp_nonlive_check
0 lelong 5
>0 use plasma_prp_nonlive_check
# Versions >= 6 store the PRP version in the first 2 bytes.
# The next 2 bytes store the number of entries in the "type map".
# Not sure what the actual practical limit of the type map count is,
# but libHSPlasma ResManager/pdUnifiedTypeMap.h defines TYPESPACE_MAX as 0x500,
# so that should be a safe maximum.
0 leshort 6
# A type map count of zero for version 6 indicates a MOUL PRP,
# which uses a different location encoding (see below) than other version 6 PRPs,
# which requires us to perform a heuristic check below slightly differently.
>2 uleshort 0
>>0 use plasma_prp_live_check
>2 uleshort !0
>>2 uleshort <0x501
>>>0 use plasma_prp_nonlive_check
0 leshort 9
>2 uleshort <0x501
>>0 use plasma_prp_nonlive_check

# Bytes 4 through 8 store the "location" field.
# The high 3 bytes (or high 2 bytes for MOUL) of the location field store the sequence prefix,
# the low byte (or low 2 bytes for MOUL) store the page number.
# (The exact encoding of these fields is a bit complex,
# but for our purposes it is close enough to a regular packed integer.)
# Low positive sequence prefixes (< 100) are used by Cyan ages,
# higher positive ones (the entire possible range basically) are used by fan ages.
# There are only very few negative sequence prefixes (-6 through -1),
# which (due to the weird encoding) means that in practice
# all negative sequence prefixes have all bits in the high 2 bytes (or high 1 byte for MOUL) set,
# and the lowest byte is <= 6.
# We use this as a heuristic to exclude some false positives. 

0 name plasma_prp_nonlive_check
>4 ulelong ^0x80000000
>>0 use plasma_prp
>4 ulelong &0xffff0000
>>5 ubyte <7
>>>0 use plasma_prp

0 name plasma_prp_live_check
# Special case for the MOUL version of Veelay Tsahvahn,
# which was accidentally assigned the sequence prefix 40004 (0x9c44),
# which is past the highest safe MOUL sequence prefix
# (32767, or 0x7fff, the last positive sequence prefix number).
# So we extend the range of recognized "positive" MOUL sequence prefixes into the negative range,
# up to 0x9fff.
>4 ulelong <0xa0000000
>>0 use plasma_prp
>4 ulelong &0xff000000
>>6 ubyte <7
>>>0 use plasma_prp

# If we got here, we're reasonably sure that this is actually a PRP.
# This is the part that actually outputs something.
# The PRP-version-to-game mappings come mostly from libHSPlasma PRP/plPageInfo.cpp.
0 name plasma_prp
>0 leshort x Plasma PRP data, version %d
!:ext prp
>>0 lelong 2 (Plasma 2.0.56?)
>>>4 use plasma_prp_location
>>0 lelong 5 (Uru offline, Until Uru, etc.)
>>>4 use plasma_prp_location
>>0 leshort 6
>>>2 uleshort 0 (MOUL)
>>>>4 use plasma_prp_location
>>>2 uleshort !0 (Myst V, Crowthistle), type map with %d entries
>>>>4 use plasma_prp_location
>>0 leshort 9 (Cosmic Osmo's Hex Isle)
>>>2 uleshort 0
>>>>4 use plasma_prp_location
>>>2 uleshort !0 \b, type map with %d entries
>>>>4 use plasma_prp_location

# The encoding of the location field is very complex (see above),
# so we can't properly decode it into sequence prefix and page numbers
# and instead only detect certain fixed values and ranges.
# We recognize a couple of known special values
# and all MOUL ages so far.
# CC ages are not fully handled yet and may give wrong names.
0 name plasma_prp_location
# INVALID and VIRTUAL come from libHSPlasma PRP/KeyedObject/plLocation.cpp.
# Not sure if these have any meaning outside of libHSPlasma or can even appear in PRPs on disk.
>0 ulelong 0xffffffff \b, location state INVALID
>0 ulelong 0 \b, location state VIRTUAL
# Here comes a long list of known ages.
# This information is mostly based on the OpenUru MOULa sequence prefix list:
# https://wiki.openuru.org/index.php?title=Myst_Online_Uru_Live_Again_Sequence_Prefix_List
# The Gehn renumbered fan prefixes are taken from Gehn's Plasma fork:
# https://github.com/GehnShard/Plasma/tree/HEAD/Scripts/dat
# Eventually the Guild of Writers Uru CC sequence prefix list should also be incorporated:
# https://www.guildofwriters.org/wiki/Uru:CC_Sequence_Prefixes
#### Global system "ages" ####
# Sequence prefix -6
>0 ulelong >0xff060000
>>0 ulelong <0xff070001 \b, age GlobalAvatars
# Sequence prefix -5
>0 ulelong >0xff050000
>>0 ulelong <0xff060001 \b, age GlobalClothing
# Sequence prefix -4
>0 ulelong >0xff040000
>>0 ulelong <0xff050001 \b, age GlobalMarkers
# Sequence prefix -3
>0 ulelong >0xff030000
>>0 ulelong <0xff040001 \b, age CustomAvatars
# Sequence prefix -2
>0 ulelong >0xff020000
>>0 ulelong <0xff030001 \b, age GUI
# Sequence prefix -1
>0 ulelong >0xff010000
>>0 ulelong <0xff020001 \b, age GlobalAnimations
#### Cyan ages ####
# Sequence prefix 1
>0 ulelong >0x10020
>>0 ulelong <0x20021 \b, age Garden
# Sequence prefix 2
>0 ulelong >0x20020
>>0 ulelong <0x30021 \b, age Garrison
# Sequence prefix 3
>0 ulelong >0x30020
>>0 ulelong <0x40021 \b, age Neighborhood
# Sequence prefix 4
>0 ulelong >0x40020
>>0 ulelong <0x50021 \b, age AvatarCustomization
# Sequence prefix 5
>0 ulelong >0x50020
>>0 ulelong <0x60021 \b, age spyroom
# Sequence prefix 6
>0 ulelong >0x60020
>>0 ulelong <0x70021 \b, age city
# Sequence prefix 7
>0 ulelong >0x70020
>>0 ulelong <0x80021 \b, age Cleft
# Sequence prefix 9
>0 ulelong >0x90020
>>0 ulelong <0xa0021 \b, age Descent
# Sequence prefix 10
>0 ulelong >0xa0020
>>0 ulelong <0xb0021 \b, age Neighborhood02
# Sequence prefix 11
>0 ulelong >0xb0020
>>0 ulelong <0xc0021 \b, age Teledahn
# Sequence prefix 12
>0 ulelong >0xc0020
>>0 ulelong <0xd0021 \b, age EderTsogal
# Sequence prefix 13
>0 ulelong >0xd0020
>>0 ulelong <0xe0021 \b, age Personal
# Sequence prefix 14
>0 ulelong >0xe0020
>>0 ulelong <0xf0021 \b, age BaronCityOffice
# Sequence prefix 15
>0 ulelong >0xf0020
>>0 ulelong <0x100021 \b, age StartUp
# Sequence prefix 16
>0 ulelong >0x100020
>>0 ulelong <0x110021 \b, age Nexus
# Sequence prefix 19
>0 ulelong >0x130020
>>0 ulelong <0x140021 \b, age EderDelin
# Sequence prefix 21
>0 ulelong >0x150020
>>0 ulelong <0x160021 \b, age Ercana
# Sequence prefix 22
>0 ulelong >0x160020
>>0 ulelong <0x170021 \b, age Kadish
# Sequence prefix 24
>0 ulelong >0x180020
>>0 ulelong <0x190021 \b, age Gira
# Sequence prefix 25
>0 ulelong >0x190020
>>0 ulelong <0x1a0021 \b, age BahroCave
# Sequence prefix 27
>0 ulelong >0x1b0020
>>0 ulelong <0x1c0021 \b, age Negilahn
# Sequence prefix 28
>0 ulelong >0x1c0020
>>0 ulelong <0x1d0021 \b, age Myst
# Sequence prefix 29
>0 ulelong >0x1d0020
>>0 ulelong <0x1e0021 \b, age Tetsonot
# Sequence prefix 30
>0 ulelong >0x1e0020
>>0 ulelong <0x1f0021 \b, age Dereno
# Sequence prefix 31
>0 ulelong >0x1f0020
>>0 ulelong <0x200021 \b, age Payiferen
# Sequence prefix 32
>0 ulelong >0x200020
>>0 ulelong <0x210021 \b, age PelletBahroCave
# Sequence prefix 34
>0 ulelong >0x220020
>>0 ulelong <0x230021 \b, age LiveBahroCaves
# Sequence prefix 35
>0 ulelong >0x230020
>>0 ulelong <0x240021 \b, age GreatTreePub
# Sequence prefix 36
>0 ulelong >0x240020
>>0 ulelong <0x250021 \b, age ErcanaCitySilo
# Sequence prefix 38
>0 ulelong >0x260020
>>0 ulelong <0x270021 \b, age Ahnonay
# Sequence prefix 39
>0 ulelong >0x270020
>>0 ulelong <0x280021 \b, age GreatZero
# Sequence prefix 41
>0 ulelong >0x290020
>>0 ulelong <0x2a0021 \b, age Kveer
# Sequence prefix 42
>0 ulelong >0x2a0020
>>0 ulelong <0x2b0021 \b, age Minkata
# Sequence prefix 43
>0 ulelong >0x2b0020
>>0 ulelong <0x2c0021 \b, age Jalak
# Sequence prefix 44
>0 ulelong >0x2c0020
>>0 ulelong <0x2d0021 \b, age AhnonayCathedral
# Sequence prefix 45
>0 ulelong >0x2d0020
>>0 ulelong <0x2e0021 \b, age GuildPub-Writers
# Sequence prefix 46
>0 ulelong >0x2e0020
>>0 ulelong <0x2f0021 \b, age GuildPub-Maintainers
# Sequence prefix 47
>0 ulelong >0x2f0020
>>0 ulelong <0x300021 \b, age GuildPub-Cartographers
# Sequence prefix 48
>0 ulelong >0x300020
>>0 ulelong <0x310021 \b, age GuildPub-Greeters
# Sequence prefix 49
>0 ulelong >0x310020
>>0 ulelong <0x320021 \b, age GuildPub-Messengers
# Sequence prefix 50
>0 ulelong >0x320020
>>0 ulelong <0x330021 \b, age philRelto
#### Fan ages in Gehn "clean" renumbering ####
# Sequence prefix 200
>0 ulelong >0xc80020
>>0 ulelong <0xc90021 \b, age Vothol
# Sequence prefix 201
>0 ulelong >0xc90020
>>0 ulelong <0xca0021 \b, age trebivdil
# Sequence prefix 202
>0 ulelong >0xca0020
>>0 ulelong <0xcb0021 \b, age GoMePubNew
# Sequence prefix 203
>0 ulelong >0xcb0020
>>0 ulelong <0xcc0021 \b, age FehnirHouse
# Sequence prefix 204
>0 ulelong >0xcc0020
>>0 ulelong <0xcd0021 \b, age ChisoPreniv
# Sequence prefix 205
>0 ulelong >0xcd0020
>>0 ulelong <0xce0021 \b, age VeeTsah
#### Fan ages in non-Gehn numbering ####
# Sequence prefix 481
>0 ulelong >0x1e10020
>>0 ulelong <0x1e20021 \b, age Elonin
# Sequence prefix 1234
>0 ulelong >0x4d20020
>>0 ulelong <0x4d30021 \b, age GoMePubNew
# Sequence prefix 1236
>0 ulelong >0x4d40020
>>0 ulelong <0x4d50021 \b, age ChisoPreniv
# Sequence prefix 1240
>0 ulelong >0x4d80020
>>0 ulelong <0x4d90021 \b, age Vothol
# Sequence prefix 5201
>0 ulelong >0x14510020
>>0 ulelong <0x14520021 \b, age Serene
# Sequence prefix 7243
>0 ulelong >0x1c4b0020
>>0 ulelong <0x1c4c0021 \b, age DescentMystV
# Sequence prefix 8501
>0 ulelong >0x21350020
>>0 ulelong <0x21360021 \b, age cityofdimensions
# Sequence prefix 10228
>0 ulelong >0x27f40020
>>0 ulelong <0x27f50021 \b, age trebivdil
# Sequence prefix 10263
>0 ulelong >0x28170020
>>0 ulelong <0x28180021 \b, age Tiam
# Sequence prefix 40004
>0 ulelong >0x9c440020
>>0 ulelong <0x9c450021 \b, age VeeTsah
# Finally, always show the raw location value in hex.
# If the location was not recognized as any of the ages/values listed above,
# this raw hex value is the only output.
>0 ulelong x \b, location 0x%x

# Output format of libHSPlasma's PrpPack tool.
# Not sure if this format is used outside of libHSPlasma.
# But hey, it has a proper magic number at least!
0 string PRD\0 Plasma PRD data
>4 pstring/h x \b, age %s
>>&0 pstring/h x \b, page %s
>>>&0 uleshort x \b, Plasma version %u
>>>>&0 uleshort x \b.%u
>>>>>&0 ulelong x \b, page ID 0x%x
>>>>>>&0 uleshort x \b, location flags 0x%x
!:ext prd

# .age and .fni are simple text files.
# These patterns recognize some common properties/commands from each of the two file types.
# These files are usually encrypted when distributed to players,
# which is why the description specifically points out that they are unencrypted.

0 regex/10/l (StartDateTime|DayLength|MaxCapacity|LingerTime|SequencePrefix|ReleaseVersion|Page) Plasma unencrypted .age configuration text
!:ext age
>0 regex/10/l Page=
>>&0 regex/1/l [^\r\n]+ \b, first page %s

0 regex/10/l Graphics\.Renderer\. Plasma unencrypted .fni configuration text
!:ext fni

# Plasma fonts (.p2f).
# These do not have a magic number,
# but their first field is a fixed-width zero-padded 256-byte string storing the font name.
# Because most font names are significantly shorter than 256 bytes [citation needed],
# we assume that name byte 64 and after have to be zero,
# as a heuristic to avoid false positives.
# TODO This pattern is still quite weak - we should check that the font name is printable ASCII.
64 ulequad 0
>72 ulequad 0
>>80 ulequad 0
>>>88 ulequad 0
>>>>96 ulequad 0
>>>>>104 ulequad 0
>>>>>>112 ulequad 0
>>>>>>>120 ulequad 0
>>>>>>>>128 ulequad 0
>>>>>>>>>136 ulequad 0
>>>>>>>>>>144 ulequad 0
>>>>>>>>>>>152 ulequad 0
>>>>>>>>>>>>160 ulequad 0
>>>>>>>>>>>>>168 ulequad 0
>>>>>>>>>>>>>>176 ulequad 0
>>>>>>>>>>>>>>>184 ulequad 0
>>>>>>>>>>>>>>>>192 ulequad 0
>>>>>>>>>>>>>>>>>200 ulequad 0
>>>>>>>>>>>>>>>>>>208 ulequad 0
>>>>>>>>>>>>>>>>>>>216 ulequad 0
>>>>>>>>>>>>>>>>>>>>224 ulequad 0
>>>>>>>>>>>>>>>>>>>>>232 ulequad 0
>>>>>>>>>>>>>>>>>>>>>>240 ulequad 0
>>>>>>>>>>>>>>>>>>>>>>>248 ulequad 0
# Byte 256 is the font size.
# We assume that the font size is between 4 and 48 (inclusive).
# The smalles fonts that come with Uru are size 6,
# and the largest ones are size 32,
# so this should be relatively safe.
>>>>>>>>>>>>>>>>>>>>>>>>256 ubyte >5
>>>>>>>>>>>>>>>>>>>>>>>>>256 ubyte <49
# Byte 256 are the font flags.
# Only the low two bits are used,
# so require all higher bits to be zero.
>>>>>>>>>>>>>>>>>>>>>>>>>>257 ulelong ^0xfc
>>>>>>>>>>>>>>>>>>>>>>>>>>>0 use plasma_p2f_font

# If we got here, we're reasonably sure that this is actually a P2F font.
# Output the font name and basic metadata.
0 name plasma_p2f_font
>0 string >\0 Plasma .p2f font data, name %s
!:ext p2f
>>256 ubyte x \b, size %u
>>>257 ulelong &0x1 \b, bold
>>>257 ulelong &0x2 \b, italic
# The calculation below only works for 8 bpp
# (the only value used in practice).
>>>273 ubyte !8 \b, %u bits per pixel
>>>273 ubyte 8
# Skip over the bitmap data (width * height).
# Don't output the "first character" field for now.
>>>>&(261.l*(4)) uleshort x
>>>>>&0 ulelong x \b, %u chars
# Go back to the "first character" field
# and output it if it's non-zero
# (although in practice it's always zero).
>>>>>>&-6 uleshort !0 \b, first char U+%04X

# Plasma resource data,
# as found in MOUL's resource.dat and Myst V's dat/Cursors.dat
# This format has a proper magic number and version field,
# so this pattern should be reliable.
0 ulelong 0xcbbcf00d Plasma resource data
!:ext dat
>4 ulelong x \b, version %u
>>4 ulelong 1
>>>8 ulelong x \b, %u files
>>>>8 ulelong >0
>>>>>12 pstring/l x \b, first file %s
>>>>>>&0 ulelong x \b, %u bytes

# Thanks to coderjo for reverse-engineering the structure of the tron files:
# https://github.com/coderjo/Bahrometer/blob/master/tron_format.md
# The first byte is a version number, probably
# (same as that of Myst V's PRP files).
0 ubyte 0x06
# These four bytes are boolean flags with known meanings
# (see documentation linked above),
# but in practice they always have the same fixed values
# in all tron files from Myst V.
# This makes them useful for detecting the tron file format somewhat reliably.
>1 ubelong 0x01010100 Myst V perceptron data
!:ext tron
>>5 ulelong x \b, %u input neurons
>>>9 use myst_v_tron_neuron
# Attempt to skip forward to the output layer,
# because the neurons there usually have interesting name strings.
# Because of the limits of the magic pattern format,
# this is only possible if all input neurons have no name and the same fixed size.
# (We actually only check the first neuron's values
# and assume all other neurons are the same.)
>>>>9 uleshort 0
>>>>>12 ulelong 268
# Factor is the total size of the following substructure:
# name length field (2 bytes)
# name field ((name length field) bytes)
# type field (1 byte)
# count field (4 bytes)
# weights ((count field) * 4 bytes)
# = 2 + (name length) + 1 + 4 + (count) * 4
# = 2 + 0 + 1 + 4 + 268*4
# = 1079
# Offset is relative to end of the input neurons count field.
>>>>>>5 ulelong x
>>>>>>>&(5.l*1079) ulelong x \b, %u output neurons
>>>>>>>>&0 use myst_v_tron_neuron

0 name myst_v_tron_neuron
>0 pstring/h x (first neuron "%s"
>>&0 ubyte x \b, type %u
>>>&0 ulelong x \b, %u weights)
