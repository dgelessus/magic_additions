# SICStus Prolog saved state (.sav) or Prolog object (.po) file, as of at least version 4.3.
# The two formats use a very similar structure and cannot be differentiated easily.
# The header is a valid Windows batch or Unix shell script.
# The header consists of the following plain text lines,
# terminated by Unix newlines unless indicated otherwise:
# * An OS-dependent launch script:
# ** On Windows: A version-suffixed sicstus command with arguments "-r %0.bat -a %1 %2 %3 %4 %5 %6 %7 %8 %9", followed by control characters CR LF SUB CR LF (the SUB is a DOS-style end of text file marker)
# ** On Unix systems: A shebang line for /bin/sh, followed by an exec call to a version-suffixed sicstus command
# * The line '# META_INFO 1'
# * Any number of plaintext metadata lines, all in the format '# NAME: "value"'. At least the following metadata information exists:
# ** FILE: Always appears exactly once as the first metadata line. Contains the absolute path to which the file was originally written.
# ** FR: Appears zero or more times after FILE. Each contains the name of one foreign resource that this file uses.
# * The line '# META_INFO END'
# * A line in the format 'version=5 archmask=0x####', where 0x#### is a hex number literal, which presumably indicates something about the target architecture and/or OS
# This plain text header is followed by the zlib-compressed binary saved state data.

# Windows-style
# This pattern is a bit of a mess.
# First, we have to start with a fixed-position literal string match,
# because apparently the first test of a pattern can't be regex.
0 string sicstus-
# Now we check that the first line has the expected format.
# This needs a regex because of the version number part.
>0 regex sicstus-[A-Za-z0-9.\-_]+\ -r\ %0.bat
# Now that we're reasonably sure that this is a SICStus file,
# restart from the beginning and show a description this time.
>>0 string sicstus- SICStus Prolog saved state/object data (Windows)
# Show the version number.
# This is done as a separate test to stop file from truncating the message for being too long.
>>>&0 regex/8s [A-Za-z0-9.\-_]+ for version %s
>>>>&0 use sicstus_sav_po

# Unix-style
0 string \#!\ /bin/sh\nexec\ sicstus- SICStus Prolog saved state/object data (Unix)
>&0 regex/8s [A-Za-z0-9.\-_]+ for version %s
>>&0 use sicstus_sav_po

0 name sicstus_sav_po
>&0 search/64s \n\#\ FILE:
>>&0 regex/256 "[^"\r\n]*" \b, original file name %s

# SICStus Prolog resource data,
# as stored in intermediate .spresdata files generated by spld.
# The data following this 32-byte header is in the same format as a .sav/.po file.
0 string SICStus\ Resource SICStus Prolog resource data
>&0 ubequad x \b, %llu bytes
>>&0 beqldate x \b, timestamp %s
!:ext spresdata

# SWI-Prolog saved state or .qlf file, as of at least version 8.
# The two formats are apparently the same except for the signature strings at the beginning.
# Sadly they are complex enough that it's very hard/impossible
# to extract anything useful using magic patterns.

# Saved state files are usually not saved standalone,
# but inside a ZIP file that has a .prc extension.
# The saved state file inside the ZIP still has a .qlf extension
# despite having a different signature string.
0 string SWI-Prolog\ state\ (www.swi-prolog.org)\n SWI-Prolog saved state data (uncompressed)
!:ext qlf

0 string SWI-Prolog\ .qlf\ file\n SWI-Prolog .qlf data
!:ext qlf
